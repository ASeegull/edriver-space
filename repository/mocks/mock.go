// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/ASeegull/edriver-space/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsers) CreateUser(ctx context.Context, newUser model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, newUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersMockRecorder) CreateUser(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsers)(nil).CreateUser), ctx, newUser)
}

// GetCarsFines mocks base method.
func (m *MockUsers) GetCarsFines(ctx context.Context, userId string) ([]model.CarsFine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarsFines", ctx, userId)
	ret0, _ := ret[0].([]model.CarsFine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarsFines indicates an expected call of GetCarsFines.
func (mr *MockUsersMockRecorder) GetCarsFines(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarsFines", reflect.TypeOf((*MockUsers)(nil).GetCarsFines), ctx, userId)
}

// GetDriverLicence mocks base method.
func (m *MockUsers) GetDriverLicence(ctx context.Context, individualTaxNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverLicence", ctx, individualTaxNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverLicence indicates an expected call of GetDriverLicence.
func (mr *MockUsersMockRecorder) GetDriverLicence(ctx, individualTaxNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverLicence", reflect.TypeOf((*MockUsers)(nil).GetDriverLicence), ctx, individualTaxNumber)
}

// GetDriversFines mocks base method.
func (m *MockUsers) GetDriversFines(ctx context.Context, userId string) ([]model.DriversFine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriversFines", ctx, userId)
	ret0, _ := ret[0].([]model.DriversFine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriversFines indicates an expected call of GetDriversFines.
func (mr *MockUsersMockRecorder) GetDriversFines(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriversFines", reflect.TypeOf((*MockUsers)(nil).GetDriversFines), ctx, userId)
}

// GetUserByCredentials mocks base method.
func (m *MockUsers) GetUserByCredentials(ctx context.Context, email, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCredentials", ctx, email, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCredentials indicates an expected call of GetUserByCredentials.
func (mr *MockUsersMockRecorder) GetUserByCredentials(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCredentials", reflect.TypeOf((*MockUsers)(nil).GetUserByCredentials), ctx, email, password)
}

// GetUserById mocks base method.
func (m *MockUsers) GetUserById(ctx context.Context, userId string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUsersMockRecorder) GetUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUsers)(nil).GetUserById), ctx, userId)
}

// UpdateUserDriverLicence mocks base method.
func (m *MockUsers) UpdateUserDriverLicence(ctx context.Context, userId, licenceNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDriverLicence", ctx, userId, licenceNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDriverLicence indicates an expected call of UpdateUserDriverLicence.
func (mr *MockUsersMockRecorder) UpdateUserDriverLicence(ctx, userId, licenceNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDriverLicence", reflect.TypeOf((*MockUsers)(nil).UpdateUserDriverLicence), ctx, userId, licenceNumber)
}

// MockSessions is a mock of Sessions interface.
type MockSessions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsMockRecorder
}

// MockSessionsMockRecorder is the mock recorder for MockSessions.
type MockSessionsMockRecorder struct {
	mock *MockSessions
}

// NewMockSessions creates a new mock instance.
func NewMockSessions(ctrl *gomock.Controller) *MockSessions {
	mock := &MockSessions{ctrl: ctrl}
	mock.recorder = &MockSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessions) EXPECT() *MockSessionsMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockSessions) DeleteSession(ctx context.Context, sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionsMockRecorder) DeleteSession(ctx, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessions)(nil).DeleteSession), ctx, sessionId)
}

// GetSessionById mocks base method.
func (m *MockSessions) GetSessionById(ctx context.Context, sessionId string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionById", ctx, sessionId)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionById indicates an expected call of GetSessionById.
func (mr *MockSessionsMockRecorder) GetSessionById(ctx, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionById", reflect.TypeOf((*MockSessions)(nil).GetSessionById), ctx, sessionId)
}

// SetSession mocks base method.
func (m *MockSessions) SetSession(ctx context.Context, refreshToken, userId string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", ctx, refreshToken, userId, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockSessionsMockRecorder) SetSession(ctx, refreshToken, userId, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockSessions)(nil).SetSession), ctx, refreshToken, userId, ttl)
}

// MockCars is a mock of Cars interface.
type MockCars struct {
	ctrl     *gomock.Controller
	recorder *MockCarsMockRecorder
}

// MockCarsMockRecorder is the mock recorder for MockCars.
type MockCarsMockRecorder struct {
	mock *MockCars
}

// NewMockCars creates a new mock instance.
func NewMockCars(ctrl *gomock.Controller) *MockCars {
	mock := &MockCars{ctrl: ctrl}
	mock.recorder = &MockCarsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCars) EXPECT() *MockCarsMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockCars) CreateCar(ctx context.Context, car *model.Car) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", ctx, car)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockCarsMockRecorder) CreateCar(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockCars)(nil).CreateCar), ctx, car)
}

// DeleteCar mocks base method.
func (m *MockCars) DeleteCar(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockCarsMockRecorder) DeleteCar(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockCars)(nil).DeleteCar), ctx, id)
}

// GetCar mocks base method.
func (m *MockCars) GetCar(ctx context.Context, id string) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCar", ctx, id)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCar indicates an expected call of GetCar.
func (mr *MockCarsMockRecorder) GetCar(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCar", reflect.TypeOf((*MockCars)(nil).GetCar), ctx, id)
}

// GetCars mocks base method.
func (m *MockCars) GetCars(ctx context.Context) (*[]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCars", ctx)
	ret0, _ := ret[0].(*[]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCars indicates an expected call of GetCars.
func (mr *MockCarsMockRecorder) GetCars(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCars", reflect.TypeOf((*MockCars)(nil).GetCars), ctx)
}

// MockDrivers is a mock of Drivers interface.
type MockDrivers struct {
	ctrl     *gomock.Controller
	recorder *MockDriversMockRecorder
}

// MockDriversMockRecorder is the mock recorder for MockDrivers.
type MockDriversMockRecorder struct {
	mock *MockDrivers
}

// NewMockDrivers creates a new mock instance.
func NewMockDrivers(ctrl *gomock.Controller) *MockDrivers {
	mock := &MockDrivers{ctrl: ctrl}
	mock.recorder = &MockDriversMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrivers) EXPECT() *MockDriversMockRecorder {
	return m.recorder
}

// CreateDriver mocks base method.
func (m *MockDrivers) CreateDriver(ctx context.Context, driver *model.Driver) (*model.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDriver", ctx, driver)
	ret0, _ := ret[0].(*model.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDriver indicates an expected call of CreateDriver.
func (mr *MockDriversMockRecorder) CreateDriver(ctx, driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDriver", reflect.TypeOf((*MockDrivers)(nil).CreateDriver), ctx, driver)
}

// DeleteDriver mocks base method.
func (m *MockDrivers) DeleteDriver(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDriver", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDriver indicates an expected call of DeleteDriver.
func (mr *MockDriversMockRecorder) DeleteDriver(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDriver", reflect.TypeOf((*MockDrivers)(nil).DeleteDriver), ctx, id)
}

// GetDriver mocks base method.
func (m *MockDrivers) GetDriver(ctx context.Context, id string) (*model.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriver", ctx, id)
	ret0, _ := ret[0].(*model.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriver indicates an expected call of GetDriver.
func (mr *MockDriversMockRecorder) GetDriver(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriver", reflect.TypeOf((*MockDrivers)(nil).GetDriver), ctx, id)
}

// GetDrivers mocks base method.
func (m *MockDrivers) GetDrivers(ctx context.Context) (*[]model.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrivers", ctx)
	ret0, _ := ret[0].(*[]model.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrivers indicates an expected call of GetDrivers.
func (mr *MockDriversMockRecorder) GetDrivers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrivers", reflect.TypeOf((*MockDrivers)(nil).GetDrivers), ctx)
}
